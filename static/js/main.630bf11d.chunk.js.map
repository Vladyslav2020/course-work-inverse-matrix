{"version":3,"sources":["components/InputMatrix.tsx","components/Buttons.tsx","components/MatrixUI.tsx","components/MatrixChain.tsx","components/Statistic.tsx","components/Body.tsx","components/Settings.tsx","components/Title.tsx","MatrixClasses/MatrixClass.ts","MatrixClasses/SquareMatrixClass.ts","components/MessageBox.tsx","MatrixClasses/IdentityMatrixClass.ts","MatrixClasses/ExtendedMatrixClass.ts","MatrixClasses/MatrixInverterClass.ts","components/App.tsx","index.tsx"],"names":["InputMatrix","props","state","matrixUI","matrix","elements","map","row","item","String","x","y","event","target","value","length","currentValue","i","char","isNaN","Number","numberParts","split","join","this","matrixItemChangeHandler","parseFloat","setState","prevProps","prevState","snapshot","dimension","j","matrixElem","className","onChange","changeHandler","bind","onBlur","blurHandler","React","Component","Buttons","onClick","fillMatrixRandomly","invertMatrix","MatrixUI","size","rowSpan","Math","round","pow","numberDecimalPlaces","titleOfMatrix","MatrixChain","clickHandler","matches","visibleMatrixChainChangeHandler","matrixChain","intermediateMatrices","index","unshift","inputMatrix","push","inverseMatrix","Statistic","numberIterations","numberOperations","Body","visibleMatrixChain","visibility","inverseMatrixUI","file","matrixData","needToShowInverseMatrix","settings","Blob","JSON","stringify","originMatrix","method","type","showSteps","download","href","URL","createObjectURL","Settings","epsilon","epsChangeHandler","epsBlurHandler","max","min","epsilonChangeHandler","id","dimensionChangeHandler","action","htmlFor","name","checked","methodChangeHandler","disabled","step","numberDecimalPlacesChangeHandler","showStepsChangeHandler","Title","Matrix","sizeX","sizeY","sizeCols","sizeRows","_elements","isValidCoords","first","second","numberOfRow","K","constr","copiedMatrix","setElementAt","SquareMatrix","_size","sum","abs","copy","swapRows","multiplyRow","coefficient","k","determinant","number","result","N","floor","random","matrix1","matrix2","newMatrix","MessageBox","hideMessageBox","message","IdentityMatrix","ExtendedMatrix","data","IMatrix","getElementAt","numberElementaryOperations","matrices","getCopyOfMatrix","MatrixInverter","_matrix","getDeterminant","extendedMatrix","processMatrix","eps","U","alpha","multiplyMatrices","getTransposeMatrix","getNorma","multiplyByNumber","E","psi","sumMatrices","norma","App","messageBox","text","inverseMatrixData","matrixInverter","getInverseMatrixGaussMethod","getInverseMatrixSchultzMethod","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.630bf11d.chunk.js","sourcesContent":["import React from 'react';\r\nimport SquareMatrix from \"../MatrixClasses/SquareMatrixClass\";\r\n\r\ninterface PropTypes{\r\n    dimension: number;\r\n    matrix: SquareMatrix;\r\n    matrixItemChangeHandler: (x: number, y: number, value: number) => void;\r\n}\r\n\r\ninterface StateType{\r\n    matrixUI: Array<Array<string>>;\r\n}\r\n\r\nclass InputMatrix extends React.Component<PropTypes, StateType>{\r\n    constructor(props: PropTypes) {\r\n        super(props);\r\n        this.state = {\r\n            matrixUI: this.props.matrix.elements.map(row => row.map(item => String(item)))\r\n        };\r\n    }\r\n    // Обробник зміни елемента матриці\r\n    changeHandler(x: number, y: number, event: React.ChangeEvent<HTMLInputElement>){\r\n        if (event.target.value.length >= 16)\r\n            return;\r\n        let currentValue = '';\r\n        for (let i = 0; i < event.target.value.length; i++){\r\n            let char: string = event.target.value[i];\r\n            if (!isNaN(Number(currentValue + char)) || (i === 0 && char === '-'))\r\n                currentValue += char;\r\n        }\r\n        if (currentValue.length > 1 && currentValue[0] !== '-'){\r\n            let numberParts = currentValue.split('.');\r\n            numberParts[0] = String(Number(numberParts[0]));\r\n            currentValue = numberParts.join('.');\r\n        }\r\n        this.props.matrixItemChangeHandler(x, y, parseFloat(currentValue) || 0);\r\n        let matrixUI = this.state.matrixUI;\r\n        matrixUI[y][x] = currentValue;\r\n        this.setState({matrixUI: [...matrixUI]});\r\n    }\r\n    // Метод, який викликається при оновленні компонента\r\n    componentDidUpdate(prevProps: Readonly<PropTypes>, prevState: Readonly<StateType>, snapshot?: any) {\r\n        if (this.props.dimension !== this.state.matrixUI.length){\r\n            this.setState({matrixUI: this.props.matrix.elements.map(row => row.map(item => String(item)))});\r\n        }\r\n        else\r\n            for (let i = 0; i < this.props.dimension; i++)\r\n                for (let j = 0; j < this.props.dimension; j++)\r\n                    if((this.state.matrixUI[i][j] !== '-' || this.props.matrix.elements[i][j] !== 0) && Number(this.state.matrixUI[i][j]) !== this.props.matrix.elements[i][j]){\r\n                        this.setState({matrixUI: this.props.matrix.elements.map(row => row.map(item => String(item)))});\r\n                        return;\r\n                    }\r\n    }\r\n    // Обробник втрати фокусу елементом матриці\r\n    blurHandler(x: number, y: number){\r\n        let matrixUI = this.state.matrixUI;\r\n        matrixUI[y][x] = String(this.props.matrix.elements[y][x]);\r\n        this.setState({matrixUI: [...matrixUI]});\r\n    }\r\n    // Рендеринг компонента\r\n    render(){\r\n        let matrixUI = this.state.matrixUI.map((item, y) =>\r\n            <tr key = {y}>\r\n                {item.map((matrixElem, x) =>\r\n                    <td key = {this.props.dimension * y + x}>\r\n                        <input className = 'matrix-item'\r\n                               value = {matrixElem}\r\n                               onChange = {this.changeHandler.bind(this, x, y)}\r\n                               onBlur = {this.blurHandler.bind(this, x, y)}\r\n                        />\r\n                    </td>\r\n                )}\r\n            </tr>\r\n        );\r\n        return (\r\n            <>\r\n                <div className=\"title-input-matrix\">Enter the elements of the matrix</div>\r\n                <table className = \"matrix\">\r\n                    {matrixUI}\r\n                </table>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputMatrix;\r\n","import React from 'react';\r\n\r\ninterface PropTypes{\r\n    fillMatrixRandomly: () => void;\r\n    invertMatrix : () => void\r\n}\r\n\r\nclass Buttons extends React.Component<PropTypes, any>{\r\n    // Рендеринг компонента\r\n    render(){\r\n        return (\r\n            <div className=\"buttons\">\r\n                <button className = 'btn fill-matrix-randomly'\r\n                        onClick = {this.props.fillMatrixRandomly}\r\n                >\r\n                    Fill matrix randomly\r\n                </button>\r\n                <button className = 'btn invert-matrix'\r\n                        onClick = {this.props.invertMatrix}\r\n                >\r\n                    Get inverse matrix\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport SquareMatrix from \"../MatrixClasses/SquareMatrixClass\";\r\nimport ExtendedMatrix from \"../MatrixClasses/ExtendedMatrixClass\";\r\n\r\ninterface PropTypes{\r\n    matrix: SquareMatrix | ExtendedMatrix;\r\n    numberDecimalPlaces: number;\r\n    titleOfMatrix: string;\r\n}\r\n\r\nclass MatrixUI extends React.Component<PropTypes, any>{\r\n    // Рендеринг компонента\r\n    render() {\r\n        let dimension = this.props.matrix.size;\r\n        let matrixUI = this.props.matrix.elements.map((item, y) =>\r\n            <tr key = {y}>\r\n                {item.map((matrixElem, x) => (y === 0 && x === dimension?\r\n                        <>\r\n                            <td key = 'separator' rowSpan = {dimension} className = 'separator'></td>\r\n                            <td key = {dimension * y + x}>\r\n                                <p>{Math.round(matrixElem * Math.pow(10, this.props.numberDecimalPlaces)) / Math.pow(10, this.props.numberDecimalPlaces)}</p>\r\n                            </td>\r\n                        </>:\r\n                        <td key = {dimension * y + x}>\r\n                            <p>{Math.round(matrixElem * Math.pow(10, this.props.numberDecimalPlaces)) / Math.pow(10, this.props.numberDecimalPlaces)}</p>\r\n                        </td>\r\n                    )\r\n                )}\r\n            </tr>\r\n        );\r\n        return (\r\n            <>\r\n                <div className=\"title-input-matrix\">{this.props.titleOfMatrix}</div>\r\n                <table className = \"matrix\">\r\n                    {matrixUI}\r\n                </table>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MatrixUI;\r\n","import React from 'react';\r\nimport SquareMatrix from \"../MatrixClasses/SquareMatrixClass\";\r\nimport ExtendedMatrix from \"../MatrixClasses/ExtendedMatrixClass\";\r\nimport MatrixUI from \"./MatrixUI\";\r\n\r\ninterface PropTypes{\r\n    inputMatrix: SquareMatrix;\r\n    inverseMatrix: SquareMatrix;\r\n    intermediateMatrices: Array<SquareMatrix | ExtendedMatrix>;\r\n    numberDecimalPlaces: number;\r\n    //showStepsChangeHandler: () => void;\r\n    visibleMatrixChainChangeHandler: (visibility: boolean) => void;\r\n}\r\n\r\nclass MatrixChain extends React.Component<PropTypes, {}>{\r\n    // Обробка натискань миші\r\n    clickHandler = (event: React.MouseEvent<HTMLDivElement>) => {\r\n        // @ts-ignore\r\n        if (event.target.matches(\".message-box-wrapper\") || event.target.matches(\".close i\")){\r\n            this.props.visibleMatrixChainChangeHandler(false);\r\n        }\r\n    }\r\n    // Рендеринг компонента\r\n    render(){\r\n        let matrixChain = this.props.intermediateMatrices.map((matrix, index) =>\r\n            <MatrixUI matrix = {matrix}\r\n                      numberDecimalPlaces = {this.props.numberDecimalPlaces}\r\n                      titleOfMatrix = {`${index}. Step`}\r\n                      key = {index + 1}\r\n            />);\r\n        matrixChain.unshift(\r\n            <MatrixUI matrix = {this.props.inputMatrix}\r\n                      numberDecimalPlaces = {this.props.numberDecimalPlaces}\r\n                      titleOfMatrix={\"Input matrix\"}\r\n                      key = {0}\r\n            />\r\n        );\r\n        matrixChain.push(\r\n            <MatrixUI matrix = {this.props.inverseMatrix}\r\n                      numberDecimalPlaces = {this.props.numberDecimalPlaces}\r\n                      titleOfMatrix = \"Inverse matrix\"\r\n                      key = {this.props.intermediateMatrices.length + 1}\r\n            />\r\n        );\r\n        return (\r\n            <div className = \"message-box-wrapper\" onClick = {this.clickHandler}>\r\n                <div className=\"matrix-chain\">\r\n                    <div className=\"close\">\r\n                        <i className=\"far fa-times-circle\"></i>\r\n                    </div>\r\n                    <div className = \"matrix-chain-body\">\r\n                        {matrixChain}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MatrixChain;\r\n","import React from 'react';\r\n\r\ninterface PropTypes{\r\n    numberOperations: number;\r\n    numberIterations: number;\r\n}\r\n\r\nlet Statistic:React.FC<PropTypes> = (props) => {\r\n    return (\r\n        <div className = 'statistic'>\r\n            <div className = 'title-input-matrix'>Statistic</div>\r\n            <div className = 'statistic-item'>Number iterations: {props.numberIterations}</div>\r\n            <div className = 'statistic-item'>Number elementary operations: {props.numberOperations}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Statistic;\r\n","import React from 'react';\r\nimport InputMatrix from \"./InputMatrix\";\r\nimport SquareMatrix from \"../MatrixClasses/SquareMatrixClass\";\r\nimport Buttons from \"./Buttons\";\r\nimport MatrixUI from \"./MatrixUI\";\r\nimport ExtendedMatrix from \"../MatrixClasses/ExtendedMatrixClass\";\r\nimport MatrixChain from \"./MatrixChain\";\r\nimport Statistic from \"./Statistic\";\r\n\r\ninterface SettingsType{\r\n    dimension: number;\r\n    method: string;\r\n    eps: number;\r\n    numberDecimalPlaces: number;\r\n    showSteps: boolean;\r\n}\r\n\r\ninterface MatrixData {\r\n    inputMatrix: SquareMatrix;\r\n    needToShowInverseMatrix: boolean;\r\n    inverseMatrix: SquareMatrix | null;\r\n    intermediateMatrices: Array<SquareMatrix | ExtendedMatrix>;\r\n    numberOperations: number;\r\n}\r\n\r\ninterface PropTypes{\r\n    settings: SettingsType;\r\n    matrixData: MatrixData;\r\n    matrixItemChangeHandler: (x: number, y: number, value: number) => void;\r\n    fillMatrixRandomly: () => void;\r\n    invertMatrix: () => void;\r\n    showStepsChangeHandler: () => void;\r\n}\r\n\r\ninterface StateType{\r\n    visibleMatrixChain: boolean;\r\n}\r\n\r\nclass Body extends React.Component<PropTypes, StateType>{\r\n    state = {\r\n        visibleMatrixChain: false\r\n    };\r\n    // Обробник відображення покрокового виконання алгоритму\r\n    visibleMatrixChainChangeHandler = (visibility: boolean) => {\r\n        this.setState({visibleMatrixChain: visibility});\r\n    }\r\n    // Рендеринг компонента\r\n    render(){\r\n        let inverseMatrixUI = null,\r\n            matrixChain = null,\r\n            file = null;\r\n        if (this.props.matrixData.needToShowInverseMatrix && this.props.matrixData.inverseMatrix){\r\n            inverseMatrixUI = <MatrixUI matrix = {this.props.matrixData.inverseMatrix}\r\n                                        numberDecimalPlaces={this.props.settings.numberDecimalPlaces}\r\n                                        titleOfMatrix = \"Inverse matrix\"\r\n            />;\r\n            file = new Blob([JSON.stringify({\r\n                originMatrix: {\r\n                    size: this.props.matrixData.inputMatrix.size,\r\n                    elements: this.props.matrixData.inputMatrix.elements\r\n                },\r\n                inverseMatrix: {\r\n                    size: this.props.matrixData.inverseMatrix.size,\r\n                    elements: this.props.matrixData.inverseMatrix.elements\r\n                },\r\n                numberOperations: this.props.matrixData.numberOperations,\r\n                numberIterations: this.props.matrixData.intermediateMatrices.length - 1,\r\n                method: (this.props.settings.method === \"Gauss\"? \"Gauss-Jordan\": \"Schultz\")\r\n            })], {\r\n                type: 'application/json'\r\n            });\r\n            if (this.props.settings.showSteps && this.state.visibleMatrixChain){\r\n                matrixChain = <MatrixChain inputMatrix = {this.props.matrixData.inputMatrix}\r\n                                           inverseMatrix = {this.props.matrixData.inverseMatrix}\r\n                                           intermediateMatrices = {this.props.matrixData.intermediateMatrices}\r\n                                           numberDecimalPlaces = {this.props.settings.numberDecimalPlaces}\r\n                                           visibleMatrixChainChangeHandler = {this.visibleMatrixChainChangeHandler}\r\n                />;\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"body\">\r\n                <Buttons fillMatrixRandomly = {this.props.fillMatrixRandomly}\r\n                         invertMatrix = {this.props.invertMatrix}\r\n                />\r\n                <InputMatrix dimension = {this.props.settings.dimension}\r\n                             matrix = {this.props.matrixData.inputMatrix}\r\n                             matrixItemChangeHandler = {this.props.matrixItemChangeHandler}\r\n                />\r\n                {inverseMatrixUI}\r\n                {\r\n                    inverseMatrixUI ?\r\n                        <Statistic numberOperations={this.props.matrixData.numberOperations}\r\n                                   numberIterations={this.props.matrixData.intermediateMatrices.length - 1}\r\n                        /> : null\r\n                }\r\n                {(!this.state.visibleMatrixChain && this.props.settings.showSteps && this.props.matrixData.needToShowInverseMatrix) &&\r\n                    <div className = \"show-steps-button\"\r\n                         onClick = {() => this.visibleMatrixChainChangeHandler(true)}\r\n                    >\r\n                        Show steps to invert matrix\r\n                    </div>\r\n                }\r\n                {matrixChain}\r\n                {file !== null ? <a className = 'download-link' download = \"statistic.json\" href = {URL.createObjectURL(file)}>\r\n                    <i className=\"fas fa-download\"></i>\r\n                    Download statistics file\r\n                    <i className=\"fas fa-download\"></i>\r\n                </a>: null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Body;\r\n","import React from 'react';\r\n\r\ninterface StateType{\r\n    epsilon: string;\r\n}\r\n\r\ninterface PropTypes{\r\n    method: string;\r\n    dimension: number;\r\n    eps: number;\r\n    numberDecimalPlaces: number;\r\n    showSteps: boolean;\r\n    dimensionChangeHandler: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    methodChangeHandler: (method: string) => void;\r\n    epsilonChangeHandler: (eps: number) => void;\r\n    numberDecimalPlacesChangeHandler: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    showStepsChangeHandler: () => void;\r\n}\r\n\r\nclass Settings extends React.Component<PropTypes, StateType>{\r\n    constructor(props: PropTypes){\r\n        super(props);\r\n        this.state = {\r\n            epsilon: '0.001'\r\n        };\r\n        this.epsChangeHandler = this.epsChangeHandler.bind(this);\r\n        this.epsBlurHandler = this.epsBlurHandler.bind(this);\r\n    }\r\n    // Обробник зміни точності обернення матриці\r\n    epsChangeHandler(event: React.ChangeEvent<HTMLInputElement>): void{\r\n        this.setState({epsilon: event.target.value});\r\n    }\r\n    // Обробник втрати\r\n    epsBlurHandler(): void{\r\n        let currentValue = Number(this.state.epsilon) || 0;\r\n        currentValue = Math.max(currentValue, 0.001);\r\n        currentValue = Math.min(currentValue, 1);\r\n        this.setState({epsilon: String(currentValue)});\r\n        this.props.epsilonChangeHandler(currentValue);\r\n    }\r\n    // Рендеринг компонента\r\n    render(){\r\n        return(\r\n            <div className=\"settings\">\r\n                <div className=\"setting-item number-input\">\r\n                    <div className = 'setting-item-title'>1. Select matrix size</div>\r\n                    <input type=\"number\"\r\n                        id = 'dimension'\r\n                        value = {String(this.props.dimension)}\r\n                        min = \"1\"\r\n                        max = \"20\"\r\n                        onChange = {this.props.dimensionChangeHandler}\r\n                    />\r\n                </div>\r\n                <div className = \"setting-item\">\r\n                    <div className = 'setting-item-title'>2. Select a matrix inversion method</div>\r\n                    <form action=\"\">\r\n                        <label htmlFor=\"gauss\" className = {this.props.method === 'Gauss'? \"selected\": \"\"}>\r\n                            <input type=\"radio\" id = \"gauss\" name = \"radio\"\r\n                                   checked = {this.props.method === 'Gauss'}\r\n                                   onChange = {() => this.props.methodChangeHandler(\"Gauss\")}\r\n                            />\r\n                            &nbsp;Jordan Gauss method\r\n                        </label>\r\n                        <label htmlFor=\"schultz\" className = {this.props.method === 'Schultz'? \"selected\": \"\"}>\r\n                            <input type=\"radio\" id = \"schultz\" name = \"radio\"\r\n                                   checked = {this.props.method === 'Schultz'}\r\n                                   onChange = {() => this.props.methodChangeHandler(\"Schultz\")}\r\n                            />\r\n                            &nbsp;Schultz's method\r\n                        </label>\r\n                    </form>\r\n                </div>\r\n                <div className = \"setting-item number-input\">\r\n                    <div className = {`setting-item-title ${this.props.method !== 'Schultz'? 'disabled': ''}`}>3. Choose method accuracy</div>\r\n                    <input type=\"number\"\r\n                        id = 'epsilon'\r\n                        disabled = {this.props.method !== 'Schultz'}\r\n                        value = {this.state.epsilon}\r\n                        min = \"0.001\"\r\n                        max = \"1\"\r\n                        step = \"0.001\"\r\n                        onChange = {this.epsChangeHandler}\r\n                           onBlur = {this.epsBlurHandler}\r\n                    />\r\n                </div>\r\n                <div className=\"setting-item number-input\">\r\n                    <div className = 'setting-item-title'>4. Select the number of decimal places in the inverse matrix</div>\r\n                    <input type=\"number\"\r\n                        id = 'number-decimal-places'\r\n                        value = {String(this.props.numberDecimalPlaces)}\r\n                        min = \"0\"\r\n                        max = \"7\"\r\n                        onChange = {this.props.numberDecimalPlacesChangeHandler}\r\n                    />\r\n                </div>\r\n                <div className=\"setting-item\">\r\n                    <div className = 'setting-item-title'>5. Show algorithm execution steps</div>\r\n                    <label htmlFor = 'show-steps' className = {this.props.showSteps? 'selected': ''}>\r\n                        <input type=\"checkbox\"\r\n                               id = 'show-steps'\r\n                               checked = {this.props.showSteps}\r\n                               onChange = {this.props.showStepsChangeHandler}\r\n                        />\r\n                        &nbsp;Show steps\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\n\r\nconst Title: React.FC = () => {\r\n    return (\r\n        <div className = 'title'>\r\n            Inverse Matrix\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","interface MatrixType{\r\n    size: number;\r\n    elements: Array<Array<number>>;\r\n    setElementAt: (x: number, y: number, value: number) => void;\r\n}\r\n\r\nclass Matrix {\r\n    private readonly sizeCols: number;\r\n    private readonly sizeRows: number;\r\n    protected _elements: Array<Array<number>>\r\n    constructor(sizeX: number, sizeY: number){\r\n        this.sizeCols = sizeX;\r\n        this.sizeRows = sizeY;\r\n        this._elements = [];\r\n        for (let i = 0; i < sizeY; i++){\r\n            this._elements.push([]);\r\n            for (let j = 0; j < sizeX; j++){\r\n                this._elements[i].push(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isValidCoords(x: number, y: number){\r\n        return x < this.sizeCols && x >= 0 && y < this.sizeRows && y >= 0;\r\n    }\r\n    // Присвоєння елементу матриці заданого значення\r\n    setElementAt(x: number, y: number, value: number) {\r\n        if (this.isValidCoords(x, y))\r\n            this.elements[y][x] = value;\r\n    }\r\n    get elements() {\r\n        return this._elements;\r\n    }\r\n    // Отримання значення елемента в точці матриці\r\n    getElementAt(x: number, y: number) {\r\n        if (this.isValidCoords(x, y)) {\r\n            return this._elements[y][x];\r\n        }\r\n        return -1;\r\n    }\r\n    // Переставлення місцями рядків матриці\r\n    swapRows(first: number, second: number) {\r\n        [this._elements[first], this._elements[second]] = [this._elements[second], this._elements[first]];\r\n    }\r\n    // Множить рядок матриці на задане число\r\n    multiplyRow(numberOfRow: number, K: number) {\r\n        for (let i = 0; i < this.sizeCols; i++) {\r\n            this._elements[numberOfRow][i] *= K;\r\n        }\r\n    }\r\n    // Отримання копії заданої матриці\r\n    static getCopyOfMatrix<T extends MatrixType>(matrix: T, constr: {new (size: number): T}): T{\r\n        let copiedMatrix: T = new constr(matrix.size);\r\n        for (let i = 0; i < matrix.elements.length; i++)\r\n            for (let j = 0; j < matrix.elements[i].length; j++)\r\n                copiedMatrix.setElementAt(j, i , matrix.elements[i][j]);\r\n        return copiedMatrix;\r\n    }\r\n}\r\n\r\nexport default Matrix;\r\n","import Matrix from \"./MatrixClass\";\r\n\r\nclass SquareMatrix extends Matrix{\r\n    protected _size: number;\r\n    constructor(size: number){\r\n        super(size, size);\r\n        this._size = size;\r\n    }\r\n    // гетер для розмірності матриці\r\n    get size(){\r\n        return this._size;\r\n    }\r\n    // Генерування випадкової квадратної матриці\r\n    static generateMatrix(N: number)\r\n    {\r\n        let matrix = new SquareMatrix(N);\r\n        for (let i = 0; i < N; i++)\r\n            for (let j = 0; j < N; j++) {\r\n                matrix.setElementAt(j, i, Math.floor(Math.random() * 100));\r\n            }\r\n        return matrix;\r\n    }\r\n    // Множення матриць\r\n    static multiplyMatrices(matrix1: SquareMatrix, matrix2: SquareMatrix)\r\n    {\r\n        if (matrix1._size !== matrix2._size)\r\n            return null;\r\n        let matrix = new SquareMatrix(matrix1._size);\r\n        for (let i = 0; i < matrix1._size; i++)\r\n            for (let j = 0; j < matrix2._size; j++) {\r\n                let sum = 0;\r\n                for (let k = 0; k < matrix1._size; k++)\r\n                    sum += matrix1._elements[i][k] * matrix2._elements[k][j];\r\n                matrix.setElementAt(j, i, sum);\r\n            }\r\n        return matrix;\r\n    }\r\n    // Транпонування матриці\r\n    getTransposeMatrix()\r\n    {\r\n        let matrix = new SquareMatrix(this._size);\r\n        for (let i = 0; i < this._size; i++)\r\n            for (let j = 0; j < this._size; j++) {\r\n                matrix.setElementAt(i, j,this._elements[i][j]);\r\n            }\r\n        return matrix;\r\n    }\r\n\r\n    getMaxSumOfRow(){\r\n        let max = 0;\r\n        for (let i = 0; i < this._size; i++){\r\n            let sum = 0;\r\n            for(let j = 0; j < this._size; j++)\r\n                sum += Math.abs(this._elements[i][j]);\r\n            max = Math.max(max, sum);\r\n        }\r\n        return max;\r\n    }\r\n    // Обчислення визначника матриці\r\n    getDeterminant()\r\n    {\r\n        let copy = new SquareMatrix(this._size);\r\n        for (let i = 0; i < this._size; i++)\r\n            for (let j = 0;  j < this._size; j++)\r\n                copy.setElementAt(j, i, this._elements[i][j]);\r\n\r\n        let K = 1;\r\n\r\n        for (let i = 0; i < copy._size; i++) {\r\n            if (copy._elements[i][i] === 0) {\r\n                for (let j = i + 1; j < copy._size; j++) {\r\n                    if (copy._elements[j][i] !== 0) {\r\n                        this.swapRows(i, j);\r\n                        K *= -1;\r\n                    }\r\n                }\r\n            }\r\n            if (copy._elements[i][i] === 0)\r\n                break;\r\n            K *= copy._elements[i][i];\r\n            copy.multiplyRow(i, 1 / copy._elements[i][i]);\r\n            for (let j = i + 1; j < copy._size; j++) {\r\n                let coefficient = copy._elements[j][i];\r\n                for (let k = 0; k < this._size; k++) {\r\n                    copy._elements[j][k] -= coefficient * copy._elements[i][k];\r\n                }\r\n            }\r\n        }\r\n        let determinant = K;\r\n        for (let i = 0; i < copy._size; i++)\r\n            determinant *= copy._elements[i][i];\r\n        return determinant;\r\n    }\r\n    // Множення матриці на задане число\r\n    multiplyByNumber(number: number)\r\n    {\r\n        let matrix = new SquareMatrix(this._size);\r\n        for (let i = 0; i < this._size; i++)\r\n            for (let j = 0; j < this._size; j++) {\r\n                matrix.setElementAt(j, i,this._elements[i][j] * number);\r\n            }\r\n        return matrix;\r\n    }\r\n    // Визначення суми двох матриць\r\n    static sumMatrices(matrix1: SquareMatrix, matrix2: SquareMatrix)\r\n    {\r\n        if (matrix1._size !== matrix2._size)\r\n            return null;\r\n        let newMatrix = new SquareMatrix(matrix1._size);\r\n        for (let i = 0; i < matrix1._size; i++)\r\n            for (let j = 0; j < matrix1._size; j++) {\r\n                newMatrix.setElementAt(j, i, matrix1._elements[i][j] + matrix2._elements[i][j]);\r\n        }\r\n        return newMatrix;\r\n    }\r\n    // Обчислення евклідової норми матриці\r\n    getNorma(): number\r\n    {\r\n        let result = 0;\r\n        for (let i = 0; i < this._size; i++)\r\n            for (let j = 0; j < this._size; j++)\r\n                result += Math.pow(Math.abs(this._elements[i][j]), 2);\r\n        return Math.pow(result, 0.5);\r\n    }\r\n}\r\n\r\nexport default SquareMatrix;\r\n","import React from 'react';\r\n\r\ninterface PropTypes{\r\n    message: string;\r\n    hideMessageBox: (event: React.MouseEvent<HTMLDivElement>) => void;\r\n}\r\n\r\nclass MessageBox extends React.Component<PropTypes>{\r\n    // Рендеринг компонента\r\n    render(){\r\n        return (\r\n            <div className = 'message-box-wrapper' onClick = {this.props.hideMessageBox}>\r\n                <div className = 'message-box'>\r\n                    <div className= 'close'>\r\n                        <i className=\"far fa-times-circle\"></i>\r\n                    </div>\r\n                    <div className = 'text'>\r\n                        {this.props.message}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageBox;\r\n","import SquareMatrix from \"./SquareMatrixClass\";\r\n\r\nclass IdentityMatrix extends SquareMatrix{\r\n    constructor(size: number) {\r\n        super(size);\r\n        for (let i = 0; i < size; i++) {\r\n            this._elements[i][i] = 1.0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default IdentityMatrix;\r\n","import Matrix from \"./MatrixClass\";\r\nimport IdentityMatrix from \"./IdentityMatrixClass\";\r\nimport SquareMatrix from \"./SquareMatrixClass\";\r\n\r\nclass ExtendedMatrix extends Matrix {\r\n    private readonly _size: number;\r\n    constructor (size: number);\r\n    constructor (matrix: SquareMatrix);\r\n    constructor(data: SquareMatrix | number) {\r\n        if (typeof data === 'number'){\r\n            super(2 * data, data);\r\n            this._size = data;\r\n        }\r\n        else{\r\n            super(2 * data.size, data.size);\r\n            this._size = data.size;\r\n            let IMatrix = new IdentityMatrix(this._size);\r\n            for (let i = 0; i < this._size; i++) {\r\n                for (let j = 0; j < this._size; j++)\r\n                    this._elements[i][j] = data.getElementAt(j, i);\r\n                for (let j = 0; j < this._size; j++)\r\n                    this._elements[i][j + this._size] = IMatrix.getElementAt(j, i);\r\n            }\r\n        }\r\n    }\r\n    // гетер для розмірності\r\n    get size(){\r\n        return this._size;\r\n    }\r\n\r\n    // Зведення розширеної матриці до одиничної\r\n    processMatrix(): {numberOperations: number, matrices: Array<ExtendedMatrix>} {\r\n        let numberElementaryOperations = 0;\r\n        let matrices: Array<ExtendedMatrix> = [];\r\n        for (let i = 0; i < this._size; i++) {\r\n            if (this._elements[i][i] === 0) {\r\n                for (let j = i + 1; j < this._size; j++) {\r\n                    if (this._elements[j][i] !== 0) {\r\n                        this.swapRows(i, j);\r\n                    }\r\n                }\r\n            }\r\n            this.multiplyRow(i, 1 / this._elements[i][i]);\r\n            numberElementaryOperations += 2 * this._size;\r\n            for (let j = 0; j < this._size; j++) {\r\n                if (j !== i) {\r\n                    let coefficient = this._elements[j][i];\r\n                    for (let k = 0; k < 2 * this._size; k++) {\r\n                        this._elements[j][k] -= coefficient * this._elements[i][k];\r\n                        numberElementaryOperations++;\r\n                    }\r\n                }\r\n            }\r\n            matrices.push(Matrix.getCopyOfMatrix<ExtendedMatrix>(this, ExtendedMatrix));\r\n        }\r\n        return {\r\n            numberOperations: numberElementaryOperations,\r\n            matrices\r\n        };\r\n    }\r\n}\r\n\r\nexport default ExtendedMatrix;\r\n","import ExtendedMatrix from \"./ExtendedMatrixClass\";\r\nimport IdentityMatrix from \"./IdentityMatrixClass\";\r\nimport SquareMatrix from \"./SquareMatrixClass\";\r\nimport Matrix from \"./MatrixClass\";\r\n\r\ninterface ReturnType{\r\n    numberOperations: number;\r\n    intermediateMatrices: Array<ExtendedMatrix | SquareMatrix>;\r\n    inverseMatrix: SquareMatrix | null;\r\n}\r\n\r\nclass MatrixInverter{\r\n    private readonly _matrix: SquareMatrix;\r\n    constructor(matrix: SquareMatrix) {\r\n        this._matrix = matrix;\r\n    }\r\n    // Обернення матриці методом Гауса-Жордана\r\n    getInverseMatrixGaussMethod(): ReturnType{\r\n        if (this._matrix.getDeterminant() === 0) {\r\n            return {\r\n                numberOperations: 0,\r\n                intermediateMatrices: [],\r\n                inverseMatrix: null\r\n            };\r\n        }\r\n        let extendedMatrix = new ExtendedMatrix(this._matrix);\r\n        let matrices = [Matrix.getCopyOfMatrix(extendedMatrix, ExtendedMatrix)]\r\n        let result = extendedMatrix.processMatrix();\r\n        matrices = [...matrices, ...result.matrices];\r\n        let matrix = new SquareMatrix(this._matrix.size);\r\n        for (let i = 0; i < this._matrix.size; i++) {\r\n            for (let j = this._matrix.size; j < 2 * this._matrix.size; j++) {\r\n                matrix.setElementAt(j - this._matrix.size, i, extendedMatrix.getElementAt(j, i));\r\n            }\r\n        }\r\n        return {\r\n            numberOperations: result.numberOperations,\r\n            intermediateMatrices: matrices,\r\n            inverseMatrix: matrix\r\n        };\r\n    }\r\n    // Обернення матриці методом Шульца\r\n    getInverseMatrixSchultzMethod(eps: number): ReturnType\r\n    {\r\n        if (this._matrix.getDeterminant() === 0)\r\n            return {\r\n                numberOperations: 0,\r\n                inverseMatrix: null,\r\n                intermediateMatrices: []\r\n            };\r\n        let numberElementaryOperations = 0;\r\n        let U: SquareMatrix;\r\n        let alpha = 1 / (SquareMatrix.multiplyMatrices(this._matrix, this._matrix.getTransposeMatrix()) as SquareMatrix).getNorma();\r\n        U = this._matrix.getTransposeMatrix().multiplyByNumber(alpha);\r\n        let E = new IdentityMatrix(this._matrix.size);\r\n\r\n        let psi: SquareMatrix = (SquareMatrix.sumMatrices(E, (SquareMatrix.multiplyMatrices(this._matrix, U) as SquareMatrix).multiplyByNumber(-1)) as SquareMatrix);;\r\n        let matrices: Array<SquareMatrix> = [];\r\n        matrices.push(Matrix.getCopyOfMatrix<SquareMatrix>(U, SquareMatrix));\r\n        let norma = psi.getNorma();\r\n        while (norma > eps) {\r\n            psi = (SquareMatrix.sumMatrices(E, (SquareMatrix.multiplyMatrices(this._matrix, U) as SquareMatrix).multiplyByNumber(-1)) as SquareMatrix);\r\n            U = (SquareMatrix.multiplyMatrices(U, (SquareMatrix.sumMatrices(E, psi) as SquareMatrix)) as SquareMatrix);\r\n            norma = psi.getNorma();\r\n            matrices.push(Matrix.getCopyOfMatrix<SquareMatrix>(U, SquareMatrix));\r\n            numberElementaryOperations += Math.pow(this._matrix.size, 3);\r\n        }\r\n        numberElementaryOperations = Math.max(numberElementaryOperations, Math.pow(this._matrix.size, 3));\r\n        return {\r\n            numberOperations: numberElementaryOperations,\r\n            inverseMatrix: U,\r\n            intermediateMatrices: matrices\r\n        };\r\n    }\r\n}\r\n\r\nexport default MatrixInverter;\r\n","import React from 'react';\r\nimport Body from './Body';\r\nimport Settings from './Settings';\r\nimport Title from './Title';\r\nimport SquareMatrix from \"../MatrixClasses/SquareMatrixClass\";\r\nimport MessageBox from \"./MessageBox\";\r\nimport ExtendedMatrix from \"../MatrixClasses/ExtendedMatrixClass\";\r\nimport MatrixInverter from \"../MatrixClasses/MatrixInverterClass\";\r\n\r\ninterface SettingsType{\r\n    dimension: number;\r\n    method: string;\r\n    eps: number;\r\n    numberDecimalPlaces: number;\r\n    showSteps: boolean;\r\n}\r\n\r\ninterface MatrixData{\r\n    inputMatrix: SquareMatrix;\r\n    needToShowInverseMatrix: boolean;\r\n    numberOperations: number;\r\n    inverseMatrix: SquareMatrix | null;\r\n    intermediateMatrices: Array<SquareMatrix | ExtendedMatrix>;\r\n}\r\n\r\ninterface MessageType{\r\n    text: string;\r\n}\r\n\r\ninterface StateType{\r\n    settings: SettingsType;\r\n    matrixData: MatrixData;\r\n    messageBox: MessageType;\r\n}\r\n\r\ninterface InverseMatrixData{\r\n    numberOperations: number;\r\n    inverseMatrix: SquareMatrix | null;\r\n    intermediateMatrices: Array<SquareMatrix | ExtendedMatrix>;\r\n}\r\n\r\nclass App extends React.Component<{}, StateType>{\r\n    constructor(props = {}){\r\n        super(props);\r\n        this.state = {\r\n            messageBox: {\r\n                text: ''\r\n            },\r\n            settings: {\r\n                dimension: 1,\r\n                method: \"\",\r\n                eps: 0.001,\r\n                numberDecimalPlaces: 3,\r\n                showSteps: false\r\n            },\r\n            matrixData: {\r\n                inputMatrix: new SquareMatrix(1),\r\n                needToShowInverseMatrix: false,\r\n                inverseMatrix: null,\r\n                intermediateMatrices: [],\r\n                numberOperations: 0\r\n            }\r\n        };\r\n        this.dimensionChangeHandler = this.dimensionChangeHandler.bind(this);\r\n        this.methodChangeHandler = this.methodChangeHandler.bind(this);\r\n        this.epsilonChangeHandler = this.epsilonChangeHandler.bind(this);\r\n        this.numberDecimalPlacesChangeHandler = this.numberDecimalPlacesChangeHandler.bind(this);\r\n        this.matrixItemChangeHandler = this.matrixItemChangeHandler.bind(this);\r\n        this.fillMatrixRandomly = this.fillMatrixRandomly.bind(this);\r\n        this.invertMatrix = this.invertMatrix.bind(this);\r\n        this.hideMessageBox = this.hideMessageBox.bind(this);\r\n        this.showStepsChangeHandler = this.showStepsChangeHandler.bind(this);\r\n    }\r\n    // Обробник налаштування показу кроків роботи алгоритмів\r\n    showStepsChangeHandler():void{\r\n        this.setState(prevState => ({...prevState, settings: {\r\n                ...prevState.settings,\r\n                showSteps: !this.state.settings.showSteps\r\n            }}));\r\n    }\r\n    // Приховування вікна повідомлень\r\n    hideMessageBox(event: React.MouseEvent<HTMLDivElement>):void{\r\n        if ((event.target as any).matches('.message-box-wrapper') || (event.target as any).matches('.close i'))\r\n            this.setState(prevState => ({...prevState,\r\n                messageBox: {\r\n                    text: ''\r\n                }\r\n            }));\r\n    }\r\n    // Обробник виклику інвертування матриці\r\n    invertMatrix():void{\r\n        let inverseMatrixData: InverseMatrixData = {numberOperations: 0, inverseMatrix: null, intermediateMatrices: []};\r\n        if (this.state.settings.method){\r\n            let matrixInverter = new MatrixInverter(this.state.matrixData.inputMatrix);\r\n            if (this.state.settings.method === 'Gauss') {\r\n                inverseMatrixData = matrixInverter.getInverseMatrixGaussMethod();\r\n            }\r\n            else if (this.state.settings.method === 'Schultz'){\r\n                inverseMatrixData = matrixInverter.getInverseMatrixSchultzMethod(this.state.settings.eps);\r\n            }\r\n            if (!inverseMatrixData.inverseMatrix){\r\n                this.setState(prevState => ({\r\n                    ...prevState,\r\n                    messageBox: {\r\n                        text: \"This matrix has no inverse matrix!!\"\r\n                    }\r\n                }));\r\n            }\r\n            else{\r\n                this.setState(prevState => ({...prevState,\r\n                    matrixData: {\r\n                        ...prevState.matrixData,\r\n                        needToShowInverseMatrix: true,\r\n                        numberOperations: inverseMatrixData.numberOperations,\r\n                        inverseMatrix: inverseMatrixData.inverseMatrix,\r\n                        intermediateMatrices: inverseMatrixData.intermediateMatrices\r\n                    }\r\n                }));\r\n            }\r\n        }\r\n        else if (!this.state.settings.method){\r\n            this.setState(prevState => ({...prevState,\r\n                messageBox: {\r\n                    text: \"You need to choose the method to invert the matrix!!\"\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    // Обробник зміни елементу матриці\r\n    matrixItemChangeHandler(x: number, y: number, value: number): void{\r\n        let matrix = this.state.matrixData.inputMatrix;\r\n        matrix.setElementAt(x, y, value);\r\n        this.setState(prevState => ({...prevState,\r\n            matrixData: {\r\n                ...prevState.matrixData,\r\n                needToShowInverseMatrix: false,\r\n                inputMatrix: matrix\r\n            }\r\n        }));\r\n    }\r\n    // Заповнення матриці випадковими числами\r\n    fillMatrixRandomly():void{\r\n        let inputMatrix = this.state.matrixData.inputMatrix;\r\n        for(let i = 0; i < inputMatrix.size; i++)\r\n            for (let j = 0; j < inputMatrix.size; j++){\r\n                inputMatrix.elements[i][j] = Math.floor(Math.random() * 200 - 100);\r\n            }\r\n        this.setState(prevState => ({...prevState,\r\n            matrixData: {\r\n                ...prevState.matrixData,\r\n                needToShowInverseMatrix: false,\r\n                inputMatrix\r\n            }\r\n        }));\r\n    }\r\n    // Обробник зміни розмірності матриці\r\n    dimensionChangeHandler(event: React.ChangeEvent<HTMLInputElement>): void{\r\n        let currentValue = Math.floor(Number(event.target.value));\r\n        currentValue = Math.max(currentValue, 1);\r\n        currentValue = Math.min(currentValue, 20);\r\n        this.setState(prevState => ({...prevState,\r\n            settings: {\r\n                ...prevState.settings,\r\n                dimension: currentValue\r\n            },\r\n            matrixData: {\r\n                ...prevState.matrixData,\r\n                needToShowInverseMatrix: false,\r\n                inputMatrix: new SquareMatrix(currentValue)\r\n            }\r\n        }));\r\n    }\r\n    // Обробник зміни методу обернення матриці\r\n    methodChangeHandler(method: string): void{\r\n        this.setState(prevState => ({...prevState,\r\n            settings: {...prevState.settings, method},\r\n            matrixData: {...prevState.matrixData, needToShowInverseMatrix: false}\r\n        }));\r\n    }\r\n    // Обробник зміни точності обернення матриці\r\n    epsilonChangeHandler(eps: number): void{\r\n        this.setState(prevState => ({...prevState,\r\n            settings: {...prevState.settings, eps},\r\n            matrixData: {...prevState.matrixData, needToShowInverseMatrix: false}\r\n        }));\r\n    }\r\n    // Обробник зміни кількості знаків після коми\r\n    numberDecimalPlacesChangeHandler(event: React.ChangeEvent<HTMLInputElement>): void{\r\n        let currentValue = Math.floor(Number(event.target.value));\r\n        currentValue = Math.max(currentValue, 0);\r\n        currentValue = Math.min(currentValue, 7);\r\n        this.setState(prevState => ({...prevState, settings: {...prevState.settings, numberDecimalPlaces: currentValue}}));\r\n    }\r\n    // Рендеринг компонента\r\n    render(){\r\n        return (\r\n            <div className = \"app\">\r\n                {this.state.messageBox.text ? <MessageBox message = {this.state.messageBox.text} hideMessageBox={this.hideMessageBox} />: false}\r\n                <Title />\r\n                <div className = \"body-wrapper\">\r\n                    <Settings\r\n                        method = {this.state.settings.method}\r\n                        dimension = {this.state.settings.dimension}\r\n                        eps = {this.state.settings.eps}\r\n                        numberDecimalPlaces = {this.state.settings.numberDecimalPlaces}\r\n                        showSteps = {this.state.settings.showSteps}\r\n                        showStepsChangeHandler = {this.showStepsChangeHandler}\r\n                        dimensionChangeHandler = {this.dimensionChangeHandler}\r\n                        methodChangeHandler = {this.methodChangeHandler}\r\n                        epsilonChangeHandler = {this.epsilonChangeHandler}\r\n                        numberDecimalPlacesChangeHandler = {this.numberDecimalPlacesChangeHandler}\r\n                    />\r\n                    <Body matrixData = {this.state.matrixData}\r\n                          settings = {this.state.settings}\r\n                          fillMatrixRandomly = {this.fillMatrixRandomly}\r\n                          matrixItemChangeHandler = {this.matrixItemChangeHandler}\r\n                          invertMatrix = {this.invertMatrix}\r\n                          showStepsChangeHandler = {this.showStepsChangeHandler}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}